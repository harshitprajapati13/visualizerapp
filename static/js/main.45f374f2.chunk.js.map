{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/InsertionSort.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","length","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","i","arraysAreEqual","startIndex","endIndex","middleIndex","Math","floor","sortArray","j","push","merge","getQuickSortAnimations","quickSort","pivotIndex","pivot","swap","partitionArray","firstIndex","secondIndex","temp","getSelectionSortAnimations","N","minIndex","selectionSort","getBubbleSortAnimations","swapped","bubbleSort","WINDOW_HEIGHT","window","innerWidth","innerHeight","PRIMARY_COLOR","SECONDARY_COLOR","ANIMATION_SPEED_MS","DISABLED_BUTTON","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","className","position","right","map","value","idx","onClick","id","src","speed","loop","autoplay","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.45f374f2.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([\"comparision1\", i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([\"comparision2\", i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([\"comparision1\", i, i]);\n        animations.push([\"comparision2\", i, i]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([\"comparision1\", j, j]);\n        animations.push([\"comparision2\", j, j]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        animations.push([\"comparision1\", i, i - startIndex]);\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\n        animations.push([\"comparision2\", i, i - startIndex]);\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot= auxillaryArray[endIndex];\n    let i=startIndex-1;\n    for(let j = startIndex; j < endIndex; ++j) {\n        animations.push([\"comparision1\", j, endIndex]);\n        animations.push([\"comparision2\", j, endIndex]);\n        if(auxillaryArray[j] <= pivot) {\n            animations.push([\"comparision1\", j, i+1]);\n            animations.push([\"swap\", j, auxillaryArray[i+1]]);\n            animations.push([\"swap\", i+1, auxillaryArray[j]]);\n            animations.push([\"comparision2\", j, i+1]);\n            i++;\n            swap(auxillaryArray, j, i);\n        }\n    }\n    animations.push([\"comparision1\", i+1, endIndex]);\n    animations.push([\"swap\", endIndex, auxillaryArray[i+1]]);\n    animations.push([\"swap\", i+1, auxillaryArray[endIndex]]);\n    animations.push([\"comparision2\", i+1, endIndex]);\n    \n    swap(auxillaryArray, i+1, endIndex);\n    return i+1;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, i]);\n            animations.push([\"comparision2\", j, i]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for(let j=0;j<N-1;j++) {\n        let swapped = false;\n        for(let i = 0; i < N-j-1; i++) {\n            animations.push([\"comparision1\", i, i + 1]);\n            animations.push([\"comparision2\", i, i + 1]);\n            if(auxillaryArray[i] > auxillaryArray[i + 1]) {\n                swapped = true;\n                animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n                animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n                swap(auxillaryArray, i, i + 1);\n            }\n        }\n        if(swapped === false) break;\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport {getMergeSortAnimations} from '../SortingAlgorithms/MergeSort';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/QuickSort';\nimport {getInsertionSortAnimations} from '../SortingAlgorithms/InsertionSort';\nimport {getSelectionSortAnimations} from '../SortingAlgorithms/SelectionSort';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/BubbleSort';\n\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = 35;\n\n\nconst PRIMARY_COLOR = 'turquoise'; //Normal color of bars\nconst SECONDARY_COLOR = 'red'; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 30; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\"\nconst ENABLED_BUTTON = {\n    nlogn: \"O(NlogN) Time Complexity\",\n    nSquare: \"O(N^2) Time Complexity\"\n}\n\nclass SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: []\n        };\n    }\n    componentDidMount() {\n        this.resetArray();\n    }\n    //Generates new random array \n    resetArray() {\n        const array = []\n        for (let i = 0;i < NUMBER_OF_ARRAY_BARS;i++) {\n            // array.push(200 + 10 * i); //pushing sorted increasing array\n            // array.push(500 - 5 * i); //pushing sorted decreasing array\n            array.push(randomIntFromInterval(25,WINDOW_HEIGHT-150)); //random array\n        }\n        this.setState({array: array});\n        this.restoreStoreButtons();\n    }\n    disableSortButtons() {\n        document.getElementById(\"mergeSort\").disabled = true;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#44A08D\";\n\n        document.getElementById(\"quickSort\").disabled = true;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#44A08D\";\n\n        document.getElementById(\"insertionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#44A08D\";\n\n        document.getElementById(\"selectionSort\").disabled = true;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#44A08D\";\n\n        document.getElementById(\"bubbleSort\").disabled = true;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n        buttonStyle.cursor = \"default\";\n        buttonStyle.background = \"#44A08D\";\n    }\n    restoreStoreButtons() {\n        document.getElementById(\"mergeSort\").disabled = false;\n        let buttonStyle = document.getElementById(\"mergeSort\").style;\n        document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n        buttonStyle.background = \"#44A08D\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"quickSort\").disabled = false;\n        buttonStyle = document.getElementById(\"quickSort\").style;\n        document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#44A08D\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"bubbleSort\").disabled = false;\n        buttonStyle = document.getElementById(\"bubbleSort\").style;\n        document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#44A08D\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"selectionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"selectionSort\").style;\n        document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#44A08D\";\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"insertionSort\").disabled = false;\n        buttonStyle = document.getElementById(\"insertionSort\").style;\n        document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n        buttonStyle.background = \"#44A08D\";\n        buttonStyle.cursor = \"pointer\";\n    }\n    //Sorting Algorithms\n    mergeSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getMergeSortAnimations(this.state.array);\n        console.log(animations);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n                \n            }\n            else {\n                    const [overwrite, barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                setTimeout(() => {\n                    \n                    barOneStyle.height = `${newHeight}px`;\n                  },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    quickSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 5000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    bubbleSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = animations[i][0] == \"comparision1\" || animations[i][0] == \"comparision2\";\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] == \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [comparision, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [swap, barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);  \n    }\n    insertionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    selectionSort() {\n        this.disableSortButtons();\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);  \n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 8000);\n        setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME); \n    }\n    render() {\n        const array = this.state.array;\n        const SORT_BUTTONS = 6;\n        const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n        return(\n            <>\n            <div className=\"array-container\" style={{position:'absolute', right:`20px`}}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                        backgroundColor: PRIMARY_COLOR,\n                        height: `${value}px`\n                        }}\n                    ></div>\n                ))}\n            </div>\n            <div className=\"container-fluid\">\n            <div className=\"buttons text-center\" > \n                <button className=\"generate\" title=\"Generates a new random array\"  onClick={() => this.resetArray()}>\n                    Rearrange Array\n                </button>\n                <button title=\"O(NlogN) Time Complexity\" id = \"mergeSort\"  onClick={() => this.mergeSort()}>\n                    Merge Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"quickSort\"  onClick={() => this.quickSort()}>\n                    Quick Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"bubbleSort\"  onClick={() => this.bubbleSort()}>\n                    Bubble Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"insertionSort\"  onClick={() => this.insertionSort()}>\n                    Insertion Sort\n                </button>\n                <button title=\"O(N^2) Time Complexity\" id = \"selectionSort\"  onClick={() => this.selectionSort()}>\n                    Selection Sort\n                </button>\n                <div className=\"algoo\" >\n                <lottie-player src=\"https://assets2.lottiefiles.com/private_files/lf30_ovEPsq.json\"  background=\"transparent\"  speed=\"2\"   loop  autoplay></lottie-player>\n            </div>\n            </div>  \n            {/* <img src={algo} alt=\"algo\" className=\"algo\"></img>   */}\n            \n            </div>\n            </>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;\n\n\n","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport './App.css'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer />\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}